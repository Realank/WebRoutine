{"version":3,"sources":["PathUploader.js","GaodeMap.js","NodesChart.js","App.js","serviceWorker.js","index.js"],"names":["Dragger","PathUploader","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fileList","uploading","_this2","setState","setTimeout","_this3","_this$state","onRemove","file","index","indexOf","newFileList","slice","splice","beforeUpload","console","log","type","onSelectFile","react_default","a","createElement","className","icon","Component","GaodeMap","mapPlugins","showPin","extData","position","longitude","latitude","style","padding","backgroundColor","color","fontSize","checked","objectSpread","marginBottom","es_switch","onChange","onPinSwitchChange","width","height","lib","amapkey","plugins","center","path","zoom","zooms","expandZoomRange","visible","strokeColor","strokeWeight","strokeOpacity","showDir","markers","map","pos","render","renderMarkerLayout","NodesChart","opt","title","text","tooltip","xAxis","data","nodes","node","yAxis","series","core_default","echarts","option","Header","Footer","Sider","Content","App","reader","FileReader","readAsText","onload","json","JSON","parse","result","lat","lon","altitude","speed","time","layout","src_PathUploader","handleRead","bind","row","col","span","src_GaodeMap","src_NodesChart","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a579047.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Upload, Icon, message, Button } from 'antd'\nconst Dragger = Upload.Dragger\n\nclass PathUploader extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      fileList: [],\n      uploading: false\n    }\n  }\n\n  handleUpload () {\n    const { fileList } = this.state\n    // const formData = new FormData();\n    // fileList.forEach((file) => {\n    //   formData.append('files[]', file);\n    // });\n\n    this.setState({\n      uploading: true\n    })\n\n    setTimeout(() => {\n      this.setState({\n        fileList: [],\n        uploading: false\n      })\n    }, 2000)\n  }\n\n  render () {\n    const { uploading, fileList } = this.state\n    const props = {\n      // multiple: true,\n      onRemove: (file) => {\n        this.setState((state) => {\n          const index = state.fileList.indexOf(file)\n          const newFileList = state.fileList.slice()\n          newFileList.splice(index, 1)\n          return {\n            fileList: newFileList\n          }\n        })\n      },\n      beforeUpload: (file) => {\n        console.log('select file ' + file.type)\n        if (file.type === 'application/json') {\n          if (this.props.onSelectFile) {\n            this.props.onSelectFile(file)\n          }\n          this.setState(state => ({\n            fileList: [file]// [...state.fileList, file]\n          }))\n        }\n\n        return false\n      },\n      fileList\n    }\n\n    return (\n      <div>\n        <Dragger {...props} >\n          <p className='ant-upload-drag-icon'>\n            <Icon type='inbox' />\n          </p>\n          <p className='ant-upload-text'>选择路径JSON文件上传</p>\n        </Dragger>\n        {/* <Button */}\n        {/* type='primary' */}\n        {/* onClick={this.handleUpload} */}\n        {/* disabled={fileList.length === 0} */}\n        {/* loading={uploading} */}\n        {/* style={{ marginTop: 16 }} */}\n        {/* > */}\n        {/* {uploading ? 'Uploading' : 'Start Upload' } */}\n        {/* </Button> */}\n      </div>\n\n    )\n  }\n}\n\nexport default PathUploader\n","import React, { Component } from 'react'\nimport { Map as Amap, Markers, Polyline } from 'react-amap'\nimport { Switch } from 'antd'\n\nclass GaodeMap extends Component {\n  constructor (props) {\n    super(props)\n    this.mapPlugins = ['Scale', 'ToolBar']\n    this.state = {\n      showPin: true\n    }\n  }\n\n  renderMarkerLayout (extData) {\n    const style = {\n      padding: '2px',\n      backgroundColor: '#66666666',\n      color: '#fff',\n      fontSize: '8px'\n      // border: '1px solid #fff',\n      // borderRadius: '3px'\n    }\n    let title = extData.position.longitude + ', ' + extData.position.latitude\n    return <div style={style} >{extData.index}</div>\n  }\n\n  onPinSwitchChange (checked) {\n    this.setState({...this.state, showPin: checked})\n  }\n\n  render () {\n    console.log('render map ')\n    return (\n      <div>\n        <div style={{marginBottom: '10px'}}><Switch checked={this.state.showPin} onChange={(checked) => (this.onPinSwitchChange(checked))} />显示坐标点</div>\n        <div style={{ width: '95%', height: '500px' }}>\n          <Amap amapkey={'0845071c891fcc8121b0afa0a26035e2'} plugins={this.mapPlugins}\n            center={this.props.path ? this.props.path[0] : null} zoom={19} zooms={[3, 20]}\n            expandZoomRange\n          >\n            <Polyline\n              path={this.props.path}\n              visible\n              style={{strokeColor: 'red', strokeWeight: '10', strokeOpacity: 0.7, showDir: true}}\n            />\n            <Markers\n              markers={this.props.path.map((pos, index) => { return {position: pos, index: index} })}\n              render={this.renderMarkerLayout}\n              visible={this.state.showPin}\n            />\n          </Amap>\n\n        </div>\n\n      </div>\n\n    )\n  }\n}\n\nexport default GaodeMap\n","import React, { Component } from 'react'\n\nimport ReactEchartsCore from 'echarts-for-react/lib/core'\nimport echarts from 'echarts/lib/echarts'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\n\nclass NodesChart extends Component {\n  render () {\n    let opt = {\n      title: { text: this.props.title },\n      tooltip: {},\n      xAxis: {\n        data: this.props.nodes.map((node, index) => { return '' + index })\n      },\n      yAxis: {},\n      series: [{\n        // name: '销量',\n        type: 'line',\n        data: this.props.nodes\n      }]\n    }\n    return (<ReactEchartsCore\n      echarts={echarts}\n      option={opt}\n      // notMerge={true}\n      // lazyUpdate={true}\n      // theme={\"theme_name\"}\n      // onChartReady={this.onChartReadyCallback}\n      // onEvents={EventsDict}\n      // opts={}\n    />)\n  }\n}\n\nexport default NodesChart\n","import React, { Component } from 'react'\nimport PathUploader from './PathUploader'\nimport './App.css'\nimport GaodeMap from './GaodeMap'\nimport NodesChart from './NodesChart'\nimport { Layout, Row, Col } from 'antd'\n\nconst {\n  Header, Footer, Sider, Content\n} = Layout\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      path: []\n    }\n  }\n  handleRead (file) {\n    var reader = new FileReader()\n    reader.readAsText(file)\n    reader.onload = () => {\n      let json = JSON.parse(reader.result)\n      console.log(json)\n      this.setState({\n        ...this.state,\n        path: json.data.map((node) => { return {latitude: node.lat, longitude: node.lon, altitude: node.altitude, speed: node.speed, time: node.time} })\n      })\n    }\n  }\n  render () {\n    return (\n      <div>\n        <Layout>\n          <Header style={{color: 'white', fontSize: '25px'}}>路径展示</Header>\n          <Layout>\n            <Sider>\n              <PathUploader onSelectFile={this.handleRead.bind(this)} />\n            </Sider>\n            <Content style={{padding: '10px'}}>\n              <Row>\n                <Col span={12}> <GaodeMap path={this.state.path} /></Col>\n                <Col span={12}>\n                  <Row><NodesChart nodes={this.state.path.map((node) => { return node.altitude })} title={'高度'} /></Row>\n                  <Row><NodesChart nodes={this.state.path.map((node) => { return node.speed })} title={'速度'} /></Row>\n                </Col>\n              </Row>\n\n            </Content>\n          </Layout>\n\n          <Footer>Realank</Footer>\n        </Layout>\n\n      </div>\n\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}